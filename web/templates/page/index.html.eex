<section>
  <h1>Ruby on Rails</h1>
  <h3>Introduction and basic stuff</h3>
  <p>Using the <%= @theme %> theme.</p>
</section>

<section>
  <h2>High-level agenda</h2>
  <ul>
    <li>What is Ruby</li>
    <li>What is Rails</li>
    <li>What is MVC</li>
    <li>What are REST and CRUD</li>
    <li>What is Rails (again) </li>
    <li>Tour of a new Rails project</li>
  </ul>
</section>

<!-- Example of nested vertical slides -->
<section>
  <section>
    <h2>What is Ruby</h2>
  </section>
  <section>
    <h2>Just another programming language</h2>
    <p>As you progress through your career you'll pick up languages like flies
      on a dead possom. Don't let it freak you out.</p>
  </section>
  <section>
    <h2>Just another programming language</h2>
    <p>Focus on learning the fundamentals of <em>programming</em> and then learning
    a new language is mostly syntax. At least until you start getting into the differences
    between procedural programming, functional programming, and object-oriented programming.</p>
  </section>
  <section>
    <h2>But people like Ruby</h2>
    <ul>
      <li>Emphasis on code readability</li>
      <li>Interpreted so there's no compiling to wait for</li>
      <li>Packages reusable code into gems</li>
    </ul>
  </section>
</section>

<section>
  <section>
    <h2>What is Rails</h2>
  </section>
  <section>
    <h2>What is Rails</h2>
    <p>Rails is a framework for building web applications using Ruby</p>
  </section>
  <section>
    <h2>Web applications, you say?</h2>
    <p>You can use rails to deliver static websites, but that's really not using
      the power of rails. Rails shines when you've got a database-connected application.</p>
  </section>
  <section>
    <h2>Framework, you say?</h2>
    <p>A collection of functions and solutions to common problems. In this case,
      useful stuff for building web applications. Just like a framework to a building
      it creates a base on which to put walls and floors.</p>
  </section>
  <section>
    <h2>Framework, you say?</h2>
    <p>The framework is opinionated. Rails believes there is a right way to do
      things and if you don't do them that way you will run into complications. It
      is kind of like saying that we can all drive faster because we agree to drive
      on the correct side of the road.</p>
    <p>Can rails be limiting? Yes, but it's worth it.</p>
  </section>
  <section>
    <h2>Framework, you say?</h2>
    <p>Rails makes a lot of decisions for you, and that allows you to build
      an application quickly. It also makes it easier for other people to follow
      your work.</p>
  </section>
  <section>
    <h2>Framework, you say?</h2>
    <p>The Rails community is equally opinionated. It has some values that it holds dear
      but you'll come to see that they're good values that everyone should hold dear.</p>
    <ul>
      <li>Convention over configuration</li>
      <li>DRY: Don't repeat yourself</li>
      <li>Active Record Pattern</li>
      <li>Heavy emphasis on testing. TDD and BDD</li>
    </ul>
  </section>
</section>

<section>
  <section>
    <h2>What is MVC?</h2>
  </section>
  <section>
    <h2>What is MVC</h2>
    <p>Rails is called an MVC framework. The MVC stands for model-view-controller.
      This describes how code is organized in a rails project and the flow of components
      when handling a request.</p>
  </section>
  <section>
    <h2>What is MVC</h2>
    <p>Rails is not the first nor is it the only MVC framework out there. This has
      turned out to be a really great way of organizing code and handling requests and
      so it has been used in many places, even outside of web application development.</p>
  </section>
  <section>
    <h2>Model</h2>
    <p>The model is an object that lives in a database. You could have a user object for
      people that log into your web site. You could have a post object for blog posts. If you
      were writing twitter you could have a tweet object. All stored in a database.</p>
  </section>
  <section>
    <h2>View</h2>
    <p>This is what you're most familiar with from your javascript and php classes.</p>
    <p>This is the actual html/css/javascript that gets shown to the user</p>
  </section>
  <section>
    <h2>Controller</h2>
    <p>The glue that binds a model to a view. The controller's job is to get data ready for
      the view to use. It's also supposed to take data from the user and prepare it for
      the model. Think of it like a traffic cop and data are the cars.</p>
  </section>
  <section>
    <h2>RCMCV</h2>
    <p>Rails implementation of the MVC architecture is really more of a RCMCV architecture.</p>
    <p>router-controller-model-controller-view.</p>
    <p>Let's discuss</p>
  </section>
  <section>
    <h2>Router</h2>
    <p>The router is the part of rails that receives a request for a web page and
      figured out which controller is responsible for servicing that request.</p>
  </section>
  <section>
    <h2>Controller</h2>
    <p>The controller gets the request from the router and figures out what data
      are needed to service the request. It will then ask the model for the data.</p>
  </section>
  <section>
    <h2>Model</h2>
    <p>The model will service the data request by reaching out to the database and
      getting what was asked for. It then gives that data back to the controller.</p>
  </section>
  <section>
    <h2>Controller (again)</h2>
    <p>The controller does any other transformations that need to be done with the
      data before handing it off to the view to be rendered.</p>
  </section>
  <section>
    <h2>View</h2>
    <p>And then the view renders it like we discussed.</p>
    <p>So remember, Rails is an MVC framework, but the actual workflow is more
      like RCMCV</p>
  </section>
</section>

<section>
  <section>
    <h2>What are REST and CRUD</h2>
  </section>
  <section>
    <h2>CRUD</h2>
    <p>This is simply an acronym for the 4 basic operations done on a database
      record: Create, Read, Update, and Destroy. No new concept here, just a
      new word.</p>
  </section>
  <section>
    <h2>REST</h2>
    <p>Representational State Transfer. Maps http verbs to actions in the
      application. Often those actions are CRUD operations.</p>
  </section>
  <section>
    <h2>HTTP Verbs, you say?</h2>
    <p>The verbs are commands that an http server understands. Most frequenlty,
      you'll use the GET command when you want to GET a page from a server.</p>
  </section>
  <section>
    <h2>HTTP Verbs, you say?</h2>
    <p>But if you want to send data that will change the web server, like adding
      a new record to a database you can use the POST command to post things to
      the server.</p>
    <p>And you can use the DELETE command when you want to destroy a record.</p>
  </section>
  <section>
    <h2>REST</h2>
    <p>So REST is a way of organizaing the application so that common http verbs
      map to common functions in your appliation, which are often CRUD operations.</p>
    <p>A RESTful architecture would map the http GET command to a database READ
      operation</p>
  </section>
  <section>
    <h2>REST</h2>
    <p>A RESTful architecture would map http POST to a database CREATE.</p>
    <p>http PATCH/PUT gets mapped to a database UPDATE</p>
    <p>http DELETE gets mapped to a database DESTROY</p>
  </section>
</section>
<section>
  <section>
    <h2>So what is Rails (again)</h2>
  </section>
  <section>
    <h2>So what is Rails (again)</h2>
    <p>Earlier I mentioned that Ruby organizes reusable code into gems, which are
      similar to modules or libraries in other languages. Rails is basically a
      collection of gems.</p>
  </section>
  <section>
    <h2>ActiveRecord</h2>
    <p>The ActiveRecord is the M in MVC. It is the Object Relational Mapping (ORM)
      that rails uses to make database calls easy, fast, and secure.</p>
    <p>Once you start using ActiveRecord you'll never want to be without it again.</p>
  </section>
  <section>
    <h2>ActionPack</h2>
    <p>This gem is the C in MVC. It is the gem that provides controllers and request handling.</p>
  </section>
  <section>
    <h2>ActionView</h2>
    <p>The gem that allows you to embed ruby code into html the same way you can
      embed php code into html.</p>
  </section>
  <section>
    <h2>And more</h2>
    <p>There are many other gems that are core components of rails, these are
      the main gems I want you to know about right now. As you mature as a Rails
      developer you'll get to know some of the others in detail.</p>
  </section>
</section>

<section>
  <section>
    <h2>Tour of a rails project</h2>
  </section>
  <section>
    <h2>Tour of a rails project</h2>
    <p>Let's take a look at a newly-created rails project to see where these
      components live and how they work together.</p>
  </section>
  <section>
    <h2>New Project</h2>
    <p>To follow along you'll need a machine that has rails installed already.</p>
    <pre><code data-trim contenteditable>
      rails new demonstration
    </code></pre>
    <p>This command will create a new rails project named demonstration in a folder named demonstration</p>
  </section>

</section>

<section>
  <section>
    <h2>Alphabet soup</h2>
    <p>A review of the terms and acronyms we've covered in this module.</p>
  </section>
  <section>
    <h2>REST</h2>
  </section>
  <section>
    <h2>ORM</h2>
  </section>
  <section>
    <h2>MVC</h2>
  </section>
</section>

<section>
  <h2>Pretty Code</h2>
  <pre><code data-trim contenteditable>
function linkify( selector ) {
if( supports3DTransforms ) {

var nodes = document.querySelectorAll( selector );

for( var i = 0, len = nodes.length; i &lt; len; i++ ) {
var node = nodes[i];

if( !node.className ) {
node.className += ' roll';
}
}
}
}
  </code></pre>
  <p>Code syntax highlighting courtesy of <a href="http://softwaremaniacs.org/soft/highlight/en/description/">highlight.js</a>.</p>
</section>


<section>
  <h2>Tabular Tables</h2>
  <table>
    <thead>
      <tr>
        <th>Item</th>
        <th>Value</th>
        <th>Quantity</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Apples</td>
        <td>$1</td>
        <td>7</td>
      </tr>
      <tr>
        <td>Lemonade</td>
        <td>$2</td>
        <td>18</td>
      </tr>
      <tr>
        <td>Bread</td>
        <td>$3</td>
        <td>2</td>
      </tr>
    </tbody>
  </table>
</section>



<section>
  <h2>Speaker View</h2>
  <p>There's a <a href="https://github.com/hakimel/reveal.js#speaker-notes">speaker view</a>. It includes a timer, preview of the upcoming slide as well as your speaker notes.</p>
  <p>Press the <em>S</em> key to try it out.</p>

  <aside class="notes">
    Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard).
  </aside>
</section>

<section>
  <h2>Export to PDF</h2>
  <p>Presentations can be <a href="https://github.com/hakimel/reveal.js#pdf-export">exported to PDF</a>, here's an example:</p>
  <iframe src="//www.slideshare.net/slideshow/embed_code/42840540" width="445" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:3px solid #666; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>
</section>
